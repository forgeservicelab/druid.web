<?php

/**
 * @file
 * Install, update and uninstall functions for the Login Destination module.
 */

/**
 * Implements hook_schema().
 */
function login_destination_schema() {
  $schema['login_destination'] = array(
    'description' => 'Login Destination rules.',
    'export' => array(
      'key' => 'machine_name',
      'key name' => 'Machine Name',
      'primary key' => 'id',
      'identifier' => 'rule', // Exports will be as $rule
      'default hook' => 'default_login_destinations',  // Function hook name.
      'api' => array(
        'owner' => 'login_destination',
        'api' => 'login_destinations',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique ID.',
        'no export' => TRUE,
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for this object. Used to identify it programmatically.',
      ),
      'triggers' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Triggers on which to perform redirect',
        'serialize' => TRUE,
        'serialized default' => 'a:0:{}',
      ),
      'roles' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Roles to perform redirect for',
        'serialize' => TRUE,
        'serialized default' => 'a:0:{}',
      ),
      'pages_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
        'description' => 'Flag to indicate from which pages to redirect. (0 = all pages except listed pages, 1 = only listed pages, 2 = Use custom PHP code)',
      ),
      'pages' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Pages from which to redirect',
      ),
      'destination_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'small',
        'description' => 'Flag to indicate the destination type. (0 = static URL, 1 = PHP code)',
      ),
      'destination' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Redirect destination',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The rule's weight.",
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
    'indexes' => array(
      'list' => array('weight'),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function login_destination_install() {
  // update the alter option of 'user/logout' to TRUE (menu_save invokes necessary hooks)
  $result = db_query("SELECT mlid, menu_name FROM {menu_links} WHERE link_path = 'user/logout' OR link_path = 'user/login' OR  link_path = 'user' ORDER BY mlid ASC");
  foreach($result as $res) {
    $item = menu_link_load($res->mlid);
    $item['options']['alter'] = TRUE;
    db_update('menu_links')
      ->fields(array(
        'options' => serialize($item['options']),
      ))
      ->condition('mlid', $item['mlid'])
      ->execute();
  }
}

/**
 * Implementation of hook_uninstall().
 */
function login_destination_uninstall() {
  variable_del('login_destination_preserve_destination');
  variable_del('login_destination_profile_redirect');
}

function login_destination_update_7000() {
  $rule = new stdClass();
  $type = variable_get('ld_condition_type', 'always');
  $snippet = variable_get('ld_condition_snippet', '');

  if ($type == 'snippet') {
    $rule->pages_type = 2;
    // We introduced php tags.
    $rule->pages = '<?php ' . $snippet . '?>';
  }
  elseif ($type == 'pages') {
    $rule->pages_type = 1;
    $rule->pages = $snippet;
  }
  else {
    $rule->pages_type = 0;
    $rule->pages = $snippet;
  }

  $type = variable_get('ld_url_type', 'static');
  $snippet = variable_get('ld_url_destination', '');

  if ($type == 'snippet') {
    $rule->destination_type = 1;
    // syntax for return value has changed.
    $rule->destination = '<?php /* ' . $snippet . ' */ ?>';
  }
  else {
    $rule->destination_type = 0;
    $rule->destination = $snippet;
  }

  $rule->triggers = array('login');
  $rule->roles = array();

  login_destination_save($rule);

  variable_set('login_destination_preserve_destination', variable_get('ld_destination', 0));

  variable_del('ld_condition_type');
  variable_del('ld_condition_snippet');
  variable_del('ld_destination');
  variable_del('ld_url_type');
  variable_del('ld_url_destination');
}

/**
 * - Add a machine name to all rules.
 * - Add empty arrays to serialized fields.
 * - Ctools assumes that tiny int fields are booleans, so change pages_type and
 *   destination_type to small ints. See http://drupal.org/node/1760752.
 */
function login_destination_update_7001() {
  db_add_field('login_destination', 'machine_name', array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'Unique ID for this object. Used to identify it programmatically.',
  ));

  // Create machine names for existing rules. We must do this before we add the
  // unique key to ensure all rows contain unique values.
  $ids = db_query('SELECT id FROM {login_destination}')->fetchCol();
  foreach ($ids as $id) {
    $machine_name = 'rule_' . $id;
    db_update('login_destination')
      ->fields(array('machine_name' => $machine_name))
      ->condition('id', $id)
      ->execute();
  }

  // The machine_name unique key can only be added after we ensure the
  // machine_name column contains unique values.
  db_add_unique_key('login_destination', 'machine_name', array('machine_name'));

  // Update any empty serialized rows with an empty array.
  foreach (array('roles', 'triggers') as $field) {
    $update = db_update('login_destination')
      ->fields(array(
        $field => 'a:0:{}',
      ))
      ->condition(
        db_or()
          ->isNull($field)
          ->condition($field, '')
      );

    $update->execute();
  }

  // Change pages_type and destination_type to small ints so that Ctools doesn't
  // export the values as booleans.
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'size' => 'small',
  );
  db_change_field('login_destination', 'pages_type', 'pages_type', $spec);
  db_change_field('login_destination', 'destination_type', 'destination_type', $spec);
}

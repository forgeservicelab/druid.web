<?php

/**
 * Implements hook_menu().
 */
function service_contract_menu() {
  $items['service-contract/add'] = array(
    'title' => t('Pre-fill service contract'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('service_contract_list_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['opportunities/list'] = array(
    'title' => t('List of opportunities'),
    'page callback' => 'opportunities_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['organisations/list'] = array(
    'title' => t('List of organisations'),
    'page callback' => 'organisations_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['extend_membership/%/%'] = array(
    'title' => t('Extend your membership'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('service_contract_extend_membership_form'),
    'access arguments' => array('extend membership'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Pre-fill service contract form.
 */
function service_contract_list_form() {
  $form['opportunities'] = array(
    '#type' => 'textfield',
    '#title' => t('Title of opportunity'),
    '#description' => t('Start typing the name of the opportunity if you think it\'s in Insightly.'),
    '#autocomplete_path' => 'opportunities/list',
    '#maxlength' => 128,
    '#size' => 128,
  );

  $form['submit_1'] = array(
    '#type' => 'submit',
    '#value' => t('Pre-fill contract with opportunity details'),
    '#submit' => array('service_contract_list_form_submit_1'),
  );

  $form['organisations'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of organisation'),
    '#description' => t('Start typing the name of the organisation if you think it\'s in Insightly.'),
    '#autocomplete_path' => 'organisations/list',
    '#maxlength' => 128,
    '#size' => 128,
  );

  $form['submit_2'] = array(
    '#type' => 'submit',
    '#value' => t('Pre-fill contract with organisation details'),
    '#submit' => array('service_contract_list_form_submit_2'),
  );

  return $form;
}

/**
 * Access the Insightly API and provide a list of all opportunities to the form.
 */
function opportunities_list($string) {
  // This instance represents the connection to the API
  $i = new DrupalInsightly();

  // The method provides the list of all the organisations
  $opportunities = $i->getOpportunities();

  $opportunities_list = array();

  // Since organisations have a lot of metadata, let's limit the array to names...
  foreach ($opportunities as $opportunity) {
    // ... and make sure only those are listed which include the form value
    if (strstr(strtolower($opportunity->OPPORTUNITY_NAME), strtolower($string))) {
      $opportunities_list[$opportunity->OPPORTUNITY_NAME . ' (Opportunity ID: ' . $opportunity->OPPORTUNITY_ID . ')'] = $opportunity->OPPORTUNITY_NAME . ' (Opportunity ID: ' . $opportunity->OPPORTUNITY_ID . ')';
    }
  }

  // The list provided as JSON for the autocomplete form
  drupal_json_output($opportunities_list);
}

/**
 * Access the Insightly API and provide a list of all organisations to the form.
 */
function organisations_list($string) {
  // This instance represents the connection to the API
  $i = new DrupalInsightly();

  // The method provides the list of all the organisations
  $organisations = $i->getorganizations();

  $organisation_list = array();

  // Since organisations have a lot of metadata, let's limit the array to names...
  foreach ($organisations as $organisation) {
    // ... and make sure only those are listed which include the form value
    if (strstr(strtolower($organisation->ORGANISATION_NAME), strtolower($string))) {
      $organisation_list[$organisation->ORGANISATION_NAME] = $organisation->ORGANISATION_NAME;
    }
  }

  // The list provided as JSON for the autocomplete form
  drupal_json_output($organisation_list);
}

/**
 * Custom submit for the pre-fill service contract form with an opportunity.
 *
 * @param $form
 * @param $form_state
 */
function service_contract_list_form_submit_1($form, &$form_state) {
  // Extract the Opportunity ID from the string
  preg_match("/\(Opportunity ID: \d+/", $form_state['input']['opportunities'], $opportunity_id);

  // Done in two steps, just in case there are weird characters in the opportunity name
  preg_match("/\d+/", $opportunity_id[0], $opportunity_id);

  // Removing the Opportunity ID from the string, leaving the name only
  $opportunity_name = substr($form_state['input']['opportunities'], 0, stripos($form_state['input']['opportunities'], ' ('));

  // Construct the path query with data for filling in the node edit form
  // This can be extended with as many fields as necessary
  $query = array(
    'field_insightly_opportunity_id' => $opportunity_id[0],
    'field_name_of_the_project' => $opportunity_name,
  );

  // Redirect to the node add form of the Service developer contract content type
  // and add the field values obtained from the to the query
  drupal_goto('node/add/service-developer-contract', array('query' => $query));
}

/**
 * Custom submit for the pre-fill service contract form with an organisation.
 *
 * @param $form
 * @param $form_state
 */
function service_contract_list_form_submit_2($form, &$form_state) {
  $selected_organisation = $form_state['input']['organisations'];

  // Construct the path query with data for filling in the node edit form
  // This can be extended with as many fields as necessary
  $query = array('field_company_name' => $selected_organisation);

  // Redirect to the node add form of the Service developer contract content type
  // and add the field values obtained from the to the query
  drupal_goto('node/add/service-developer-contract', array('query' => $query));
}

/**
 * Pre-fill the node edit form for the Service developer content type
 *
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function service_contract_form_service_developer_contract_node_form_alter(&$form, &$form_state, $form_id) {
  // Get the URI and parse the query
  $parsed_query = drupal_parse_url(request_uri());

  // Pre-fill opportunity ID
  if (isset($parsed_query['query']['field_insightly_opportunity_id'])) {
    $form['field_insightly_opportunity_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $parsed_query['query']['field_insightly_opportunity_id'];
  }

  // Pre-fill the field with opportunity / project name
  if (isset($parsed_query['query']['field_name_of_the_project'])) {
    $form['field_name_of_the_project'][LANGUAGE_NONE][0]['value']['#default_value'] = $parsed_query['query']['field_name_of_the_project'];
  }

  // Pre-fill the field with company name
  if (isset($parsed_query['query']['field_company_name'])) {
    $form['field_company_information'][LANGUAGE_NONE][0]['field_company_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $parsed_query['query']['field_company_name'];
  }
}

/**
 * Call the Insightly update function when creating the contract
 *
 * Implements hook_node_insert().
 */
function service_contract_node_insert($node) {
  // if service contract AND the Insightly opportunity ID is filled in
  if (($node->type == 'service_developer_contract') && (isset($node->field_insightly_opportunity_id[LANGUAGE_NONE][0]['value']))) {
    update_insightly($node);
  }
}

/**
 * Call the Insightly update function when updating the contract
 *
 * Implements hook_node_update().
 */
function service_contract_node_update($node) {
  // if service contract AND the Insightly opportunity ID is filled in
  if (($node->type == 'service_developer_contract') && (isset($node->field_insightly_opportunity_id[LANGUAGE_NONE][0]['value']))) {
    update_insightly($node);
  }
}

/**
 * Diff the node content and the API content, update if there is a difference
 */
function update_insightly($node) {
  // This instance represents the connection to the API
  $i = new DrupalInsightly();

  // This was filled in in the node form, should be correct
  $opportunity_id = $node->field_insightly_opportunity_id[LANGUAGE_NONE][0]['value'];

  // Get Insightly record: based on ID
  $opportunity = $i->getOpportunity($opportunity_id);

  // Compare Insightly data with node data
  if ($node->field_name_of_the_project[LANGUAGE_NONE][0]['value'] != $opportunity->OPPORTUNITY_NAME) {
    // Update Insightly opportunity with new name
    $opportunity->OPPORTUNITY_NAME = $node->field_name_of_the_project[LANGUAGE_NONE][0]['value'];

    // Since the opportunity ID is provided this will be a PUT / update
    $i->addOpportunity($opportunity);
  }
}

/**
 * Extend membership form
 */
function service_contract_extend_membership_form() {
  // @todo: remove if unnecessary
  $path_args = explode('/', $_GET['q']);

  // @todo: Check the hash, report error if any

  // @todo: Check if membership was confirmed already

  $form['membership_extension'] = array(
    '#type' => 'checkbox',
    '#title' => t('Yes, I want to extend my membership'),
    '#description' => t('Tick the checkbox and click submit if you want to extend your membership'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Extend membership'),
    '#submit' => array('service_contract_membership_submit'),
  );

  return $form;
}

/**
 * Custom submit handler for the membership extension form
 */
function service_contract_membership_submit($form, &$form_state) {
  if ($form_state['input']['membership_extension']) {
    global $user;
    // The checkbox is ticked, take action
    // @todo: remove if unnecessary
    $path_args = explode('/', $_GET['q']);

    // @todo: If correct hash/path then confirm membership through API and/or DB table

    // Send out an email with confirmation message
    $account_to_notify = user_load($user->uid);
    membership_confirmed_successfully($account_to_notify);

    // @todo: If successfully confirmed then show message
    drupal_set_message(t('Your membership was successfully confirmed'), 'status');

    // Redirect to either front page or somewhere, since the submit form is irrelevant
    drupal_goto('<front>');
  } else {
    // Checkbox is left unchecked, warn the user and do nothing
    drupal_set_message(t('You need to check the box and then click the submit button. Try again!'), 'warning');
  }
}

// @todo: function that returns a correct path with hashes, also used for checking
/**
 * Generate path for membership confirmation form
 */
// @todo: specify and add arguments
function membership_confirmation_path() {
  // @todo: calculate the hash for the given function arguments
  return hash('sha256', 'the salt' . 'and this to-be-hashed');
}

// @todo: function that sends out an email with hashed path
/**
 * Send out membership extension email with calculated hash
 */
function membership_expiry_email() {
  //drupal_mail();
}

/**
 * Permission for changing membership extension
 */
function service_contract_permission() {
  return array(
    'extend membership' => array(
      'title' => t('Extend membership'),
      'description' => t('Allow user to submit a membership extension form.'),
    ),
  );
}

// @todo: function that sends out an email after confirmation
/**
 * Send out confirmation if the membership was successfully updated
 */
function membership_confirmed_successfully($account) {
  $params['account'] = $account;
  drupal_mail('service_contract', 'membership_extended', $account->mail, user_preferred_language($account), $params);
}

/**
 * Implements hook_mail()
 *
 * Configures the email sent when membership is expiring or is confirmed.
 */
function service_contract_mail($key, &$message, $params) {
  $data['user'] = $params['account'];
  $options['language'] = $message['language'];
  $lang_code = $message['language']->language;
  $variables = array('!username' => $params['account']->name);

  switch($key) {
    case 'membership_ask_user':
      break;
    case 'membership_extended':
      $message['subject'] = t('Extend your FORGE membership now', $variables, array('langcode' => $lang_code));
      $message['body'][] = t("Dear !username \n\n Your membership was successfully extended, thank you for doing business with us! \n\n The FORGE Team\n\n", $variables, array('langcode' => $lang_code));
      break;
  }
}

<?php
/**
 * Implements hook_menu().
 */
function ldap_forge_menu() {
  $items = array();
  $items['admin/config/people/ldap/forge'] = array(
    'title' => 'forge',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_forge_admin_settings'),
    'access arguments' => array('administer ldap forge'),
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ldap_forge_permission() {
  return array(
    'administer ldap forge' => array(
      'title' => t('Administer ldap forge'),
      'description' => t('Administer the ldap forge module.'),
    ),
  );
}

/**
 * Creates settings form where you can define which view modes can be used
 */
function ldap_forge_admin_settings($form, &$form_state) {
  $form = array(
    'info' => array(
      '#markup' => '<h1>FORGE LDAP settings</h1><p>These settings will apply to users that auth through LDAP. Settings are applied on every login, in order to keep access rights in place.</p>',
    ),
    'groups' => array(),
  );
  // Get roles
  $roles = user_roles(TRUE);
  $settings = variable_get('ldap_forge_settings', array());
  $groups = ldap_forge_groups();
  foreach($groups as $gid => $group) {
    $form['groups'][$gid] = array(
      '#type' => 'fieldset',
      '#title' => $group['cn'][0],
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      // Roles
      'roles' => array(
        '#title' => 'Auto assigned roles for group',
        '#type' => 'checkboxes',
        '#options' => $roles,
        '#default_value' => isset($settings[$gid]['roles']) ? $settings[$gid]['roles']: array(),
      ),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );
  return $form;
}

/**
 * Handles settings saving
 **/
function ldap_forge_admin_settings_submit($form, &$form_state) {
  $settings = array();
  foreach($form_state['groups'] as $gid => $group_info) {
    $roles = array();
    foreach($form_state['values'][$gid]['roles'] as $rid => $assign)
      if($assign != 0)
        $roles[$rid] = $rid;
    $settings[$gid] = array(
      'roles' => $roles,
      'organizer' => !empty($form_state['values'][$gid]['organizer_nid']) ? $form_state['values'][$gid]['organizer_nid']: FALSE,
    );
  }
  variable_set('ldap_forge_settings', $settings);
  drupal_set_message('Settings saved', 'success');
}

function ldap_forge_ldap_authentication_allowuser_results_alter($ldap_user, $name, &$hook_result) {
  //ddl(array($ldap_user, $name, $hook_result));
}

function ldap_forge_groups() {
  $groups = array();
  if ($ldap_servers = ldap_servers_get_servers(NULL, 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Search for posixGroups which is the baseclass of forge group entry
    if (($results = $ldap_server->search(ldap_forge_group_binding(), 'objectClass=posixGroup')) && isset($results['count']) && $results['count'] > 0)
      for($n = 0; $n < $results['count']; $n++)
        $groups[$results[$n]['gidnumber'][0]] = $results[$n];
    else
      drupal_set_message(t('No results.'));
  }
  else
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
  return $groups;
}

function ldap_forge_user_presave(&$edit, $account, $category) {
  // Look for LDAP event, ignore admin
  if($category == 'ldap_user' && (!isset($account->uid) || $account->uid != 1)) {
    $group = ldap_forge_group_settings($edit['field_ldap_gid'][LANGUAGE_NONE][0]['value']);
    if(isset($group['organizer']) && $group['organizer'])
      $edit['field_organizer_ref'][LANGUAGE_NONE][0] = array('target_id' => $group['organizer']);
    if(isset($group['roles']))
      foreach($group['roles'] as $rid)
        if(!isset($account->roles[$rid]))
          $edit['roles'][$rid] = $rid;
  }
}

function ldap_forge_group_settings($gid) {
  $settings = variable_get('ldap_forge_settings', array());
  return isset($settings[$gid]) ? $settings[$gid]: FALSE;
}

function ldap_forge_group_binding() {
  return variable_get('ldap_forge_group_binding', 'ou=groups,dc=forgeservicelab,dc=fi');
}

function ldap_forge_group_binding_set($binding) {
  return variable_set('ldap_forge_group_binding', $binding);
}

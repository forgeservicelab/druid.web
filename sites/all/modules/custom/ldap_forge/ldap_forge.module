<?php
/**
 * Implements hook_menu().
 */
function ldap_forge_menu() {
  $items = array();
  $items['admin/config/people/ldap/forge'] = array(
    'title' => 'forge',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_forge_admin_settings'),
    'access arguments' => array('administer ldap forge'),
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ldap_forge_permission() {
  return array(
    'administer ldap forge' => array(
      'title' => t('Administer ldap forge'),
      'description' => t('Administer the ldap forge module.'),
    ),
  );
}

/**
 * Creates settings form where you can define which view modes can be used.
 */
function ldap_forge_admin_settings($form, &$form_state) {
  $form = array(
    'info' => array(
      '#markup' => '<h1>FORGE LDAP settings</h1><p>These settings will apply to users that auth through LDAP. Settings are applied on every login, in order to keep access rights in place.</p>',
    ),
    'groups' => array(),
  );
  // Get roles.
  $roles = user_roles(TRUE);
  $settings = variable_get('ldap_forge_settings', array());
  $groups = ldap_forge_groups();
  foreach ($groups as $group_dn_hash => $group) {
    $dn_splitted = explode(',', $group['dn']);
    $form['groups'][$group_dn_hash] = array(
      '#type' => 'fieldset',
      '#title' => $group['cn'][0],
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      // Roles.
      'roles' => array(
        '#title' => 'Auto assigned roles for group',
        '#type' => 'checkboxes',
        '#options' => $roles,
        '#default_value' => isset($settings[$group_dn_hash]) ? $settings[$group_dn_hash]: array(),
      ),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );
  return $form;
}

/**
 * Handles settings saving.
 */
function ldap_forge_admin_settings_submit($form, &$form_state) {
  $settings = array();
  foreach ($form_state['groups'] as $group_dn_hash => $group_info) {
    $roles = array();
    foreach ($form_state['values'][$group_dn_hash]['roles'] as $rid => $assign) {
      if ($assign != 0) {
        $roles[$rid] = $rid;
      }
    }
    $settings[$group_dn_hash] = $roles;
  }
  variable_set('ldap_forge_settings', $settings);
  drupal_set_message('Settings saved', 'success');
}

/**
 * Fetches groups from ldap.
 */
function ldap_forge_groups() {
  $groups = array();
  if ($ldap_servers = ldap_servers_get_servers(NULL, 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Search for organizationalRole which is the baseclass of forge group entry.
    if (($results = $ldap_server->search(ldap_forge_group_binding(), 'objectClass=groupOfNames')) && isset($results['count']) && $results['count'] > 0) {
      for ($n = 0; $n < $results['count']; $n++) {
        $groups[md5($results[$n]['dn'])] = $results[$n];
      }
    }
    else
      drupal_set_message(t('No results.'));
  }
  else
    drupal_set_message(t('LDAP connection error. Please contact an Administrator.'));
  return $groups;
}

/**
 * Implements hook_cas_user_presave().
 * Handles adding and removing roles for users according the settings.
 */
function ldap_forge_cas_user_presave(&$edit, $account) {
  $settings = variable_get('ldap_forge_settings', array());
  $groups = ldap_forge_groups();
  // Put in the default authed user role.
  $roles = array(2 => 'authenticated user');
  // Go through the groups and look for occupant.
  foreach($groups as $group_dn_hash => $group) {
    // When found, add into roles array.
    if(!empty($settings[$group_dn_hash]) && in_array('cn=' . $edit['cas_user']['name'] . ',' . ldap_forge_people_binding(), $group['member'])) {
      $roles += $settings[$group_dn_hash];
    }
  }
  $edit['roles'] = $roles;
}

/**
 * LDAP binding for people.
 */
function ldap_forge_people_binding() {
  return variable_get('ldap_forge_people_binding', 'ou=accounts,dc=forgeservicelab,dc=fi');
}

/**
 * Get group settings.
 */
function ldap_forge_group_settings($group_dn_hash) {
  $settings = variable_get('ldap_forge_settings', array());
  return isset($settings[$group_dn_hash]) ? $settings[$group_dn_hash]: FALSE;
}

/**
 * LDAP binding for groups.
 */
function ldap_forge_group_binding() {
  return variable_get('ldap_forge_group_binding', 'dc=forgeservicelab,dc=fi');
}

/**
 * Set LDAP binding for groups.
 */
function ldap_forge_group_binding_set($binding) {
  return variable_set('ldap_forge_group_binding', $binding);
}

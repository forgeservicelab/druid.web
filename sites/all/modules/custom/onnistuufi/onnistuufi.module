<?php

/**
 * Implements hook_menu().
 */
function onnistuufi_menu() {
  $items['admin/config/services/onnistuufi'] = array(
    'title' => 'Onnistuu.fi configuration',
    'description' => 'Onnistuu.fi API conficuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('onnistuufi_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/onnistuufi.admin.inc',
  );

  $items['onnistuufi/success'] = array(
    'title' => 'Success',
    'page callback' => 'onnistuufi_return_success',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['onnistuufi/error'] = array(
    'title' => 'Error',
    'page callback' => 'onnistuufi_return_error',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['onnistuufi/sign'] = array(
    'title' => 'Sign the document',
    'page callback' => 'onnistuufi_sign',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Defines steps.
 */
function _onnistuufi_steps() {
  return array(
    1 => array(
      'form' => 'onnistuufi_sign_form_step1',
    ),
    2 => array(
      'form' => 'onnistuufi_sign_form_step2',
    ),
  );
}

/**
 * Get sign form.
 */
function onnistuufi_sign() {
  return drupal_get_form('onnistuufi_sign_form');
}

/**
 * Form constructor for the sign form.
 */
function onnistuufi_sign_form($form, &$form_state) {

  // Initialize a description of the steps for the wizard.
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;

    // This array contains the function to be called at each step to get the
    // relevant form elements. It will also store state information for each
    // step.
    $form_state['step_information'] = _onnistuufi_steps();
  }
  $step = &$form_state['step'];
  drupal_set_title(t('Sign the document: Step @step', array('@step' => $step)));
  $function = $form_state['step_information'][$step]['form'];

  $form = $function($form, $form_state);

  // Show the Next button only if there are more steps defined.
  if ($step < count($form_state['step_information']) && !empty($form)) {
    // The Next button should be included on every step.
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#submit' => array('onnistuufi_sign_form_next_submit'),
    );
  }
  elseif (!empty($form)) {
    // Just in case there are no more steps, we use the default submit handler
    // of the form wizard. Call this button Finish, Submit, or whatever you
    // want to show. When this button is clicked, the
    // form_example_wizard_submit handler will be called.
    $form['#action'] = url('https://www.onnistuu.fi/external/entry/');
    $form['finish'] = array(
      '#type' => 'submit',
      '#value' => t('Sign'),
    );
  }

  // Include each validation function defined for the different steps.
  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form['next']['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }

  return $form;
}

/**
 * Submit handler for the 'next' button.
 *
 * This function:
 * - Saves away $form_state['values']
 * - Increments the step count.
 * - Replace $form_state['values'] from the last time we were at this page
 *   or with array() if we haven't been here before.
 * - Force form rebuild.
 */
function onnistuufi_sign_form_next_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_information'])) {
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    $current_step++;

    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;
    return;
  }
}

/**
 * Implementation of step1
 */
function onnistuufi_sign_form_step1($form, &$form_state) {

  if (empty($_GET['document'])) {
    drupal_set_message(t('You need to define document for signing.'), 'error');
    return;
  }

  $signing_options = variable_get('onnistuufi_signing_options', '');

  if ($signing_options['Personal ID']) {
    $form['personal_id'] = array(
      '#title' => 'Personal ID',
      '#type' => 'textfield',
      '#default_value' => '',
      '#description' => t('Give your Personal ID for signing.'),
    );
  }

  if ($signing_options['Company ID']) {
    $form['company_id'] = array(
      '#title' => 'Company ID',
      '#type' => 'textfield',
      '#default_value' => '',
      '#description' => t('Give Company ID for signing.'),
    );
  }

  if ($signing_options['Email invitation']) {
    $form['email_invitation'] = array(
      '#title' => 'Email invitation',
      '#type' => 'textarea',
      '#default_value' => '',
      '#description' => t('List of emails for signing. Personal ID|email address on one line. Example: 1234567-123E|address.to@invite.com'),
    );
  }

  $doc = _onnistuufi_check_document_uri($_GET['document']);

  $form['document'] = array(
    '#type' => 'hidden',
    '#value' => $doc,
  );

  if (!empty($_GET['document'])) {
    $form['markup'] = array(
      '#markup' => t('<p>You can check here document for digital signature: <a href="@doc">@doc</a></p>', array('@doc' => $doc)),
    );
  }

  return $form;
}

/**
 * Implementation of step2.
 */
function onnistuufi_sign_form_step2($form, &$form_state) {
  global $base_url;

  $client = onnistuufi_init();

  $stamp = time();

  if (!empty($form_state['values']['personal_id'])) {
    $id = $form_state['values']['personal_id'];
    $requirements = array(
      array(
        'type' => 'person',
        'identifier' => "$id",
      ),
    );
  }

  if (!empty($form_state['values']['company_id'])) {
    $id = $form_state['values']['company_id'];
    $requirements += array(
      array(
        'type' => 'company',
        'identifier' => "$id",
      ),
    );
  }

  if (!empty($form_state['values']['email_invitation'])) {
    $emails = explode("\r\n", $form_state['values']['email_invitation']);
    if (is_array($emails)) {
      foreach ($emails as $row) {
        $row_arr = explode("|", $row);
        $id = $row_arr[0];
        $email = $row_arr[1];
        $requirements_emails[] = array(
          'type' => 'email',
          'identifier' => "$id",
          'email' => $email,
        );
      }
    }
  }
  $requirements = array_merge($requirements, $requirements_emails);

  $doc = $form_state['values']['document'];

  $encrypted = $client->encryptRequest(
    array(
      'stamp' => "$stamp",
      'return_success' => $base_url . '/onnistuufi/success',
      'document' => "$doc",
      'requirements' => $requirements,
    )
  );

  $form['markup'] = array(
    '#markup' => t('<p>Please check your information and sign the document.</p><p>Document: <a href="@doc">@doc</a></p>', array('@id' => $id, '@doc' => $doc)),
  );

  $form['return_failure'] = array(
    '#type' => 'hidden',
    '#value' => $base_url . '/onnistuufi/error',
  );
  $form['customer'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('onnistuufi_customer_id', ''),
  );
  $form['data'] = array(
    '#type' => 'hidden',
    '#value' => $encrypted['data'],
  );
  $form['iv'] = array(
    '#type' => 'hidden',
    '#value' => $encrypted['iv'],
  );

  return $form;
}

/**
 * Implements hook_init.
 */
function onnistuufi_init() {
  module_load_include('inc', 'onnistuufi', 'includes/client');
  $client = new OnnistuuExternalClient(
    variable_get('onnistuufi_customer_id', ''),
    variable_get('onnistuufi_crypt_key', '')
  );
  return $client;
}

/**
 * Return is everything went correctly.
 */
function onnistuufi_return_success() {
  $data = $_GET['data'];
  $iv = $_GET['iv'];
  $client = onnistuufi_init();
  $decrypt_data = $client->decryptReturn($data, $iv);
  $doc = $decrypt_data->document;

  $text = t('Signed document is available here: <a href="@url">@doc</a>', array(
    '@url' => url($doc),
    '@doc' => $doc,
  ));
  return $text;
}

/**
 * Return if fail.
 */
function onnistuufi_return_error() {
  $message = $_GET['onnistuu_message'] . '.';
  //$message .= onnistuufi_error_handling($_GET['onnistuu_error']);
  $text = t('<p>Error occured while signing. Error message: <br/> @message</p><p>Please contact site administrator.</p>', array('@message' => $message));
  return $text;
}

/**
 * Validates document uri.
 */
function _onnistuufi_check_document_uri($uri) {
  // Encode path and put all together manually.
  // TODO: I didn't use http_build_url because it didn't work for some reason.
  $error = FALSE;
  $parts = parse_url($uri);
  $path = drupal_encode_path($parts['path']);

  if (empty($parts['scheme'])) {
    $error = TRUE;
    $message = t('Missing scheme from document url.');
  }
  else {
    $doc = $parts['scheme'] . '://';
  }
  if (empty($parts['host'])) {
    $error = TRUE;
    $message = t('Missing host from document url.');
  }
  else {
    $doc .= $parts['host'];
  }

  if (!empty($parts['port'])) {
    $doc .= ':' . $parts['port'] . '/';
  }
  else {
    $doc .= '/';
  }

  if (!empty($parts['path'])) {
    $doc .= ltrim($path, '/');
  }

  if (!empty($parts['query'])) {
    $doc .= '?' . $parts['query'];
  }

  if ($error) {
    drupal_set_message($message, 'error');
  }

  return $doc;
}

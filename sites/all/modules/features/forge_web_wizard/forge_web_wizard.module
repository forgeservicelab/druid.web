<?php
/**
 * @file
 * Code for the FORGE WEB wizard feature.
 */

include_once 'forge_web_wizard.features.inc';

/**
* Implements hook_block_info().
*/
function forge_web_wizard_block_info() {
  $blocks = array();
  $blocks['forge_web_wizard_templates'] = array(
    'info' => t('Forge Web wizard: Templates'),
  );

  return $blocks;
}

/**
* Implements hook_block_view().
*/
function forge_web_wizard_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'forge_web_wizard_templates' :
    $block['content'] = forge_web_wizard_block_output();
    break;
  }

  return $block;
}

/**
* Implements hook_block_configure().
*/
function forge_web_wizard_block_configure($delta='') {
  $form = array();

  switch($delta) {
    case 'forge_web_wizard_templates' :
      // Text field form element
      $form['forge_web_wizard_template_text_body'] = array(
        '#type' => 'text_format',
        '#title' => t('Body'),
        '#default_value' => variable_get('forge_web_wizard_template_text_body',''),
       );

      // File selection form element
      $form['forge_web_wizard_template_sda'] = array(
        '#name' => 'block_image',
        '#type' => 'managed_file',
        '#title' => t('Service Developer Contract (SDA)'),
        '#description' => t('Select a PDF template for the Service Developer Contract. Only pdf allowed.'),
        '#default_value' => variable_get('forge_web_wizard_template_sda_fid', ''),
        '#upload_location' => 'public://forge_web_wizard_templates/',
        '#upload_validators' => array(
          'file_validate_extensions' => array('pdf'),
        ),
      );
      
      // File selection form element
      $form['forge_web_wizard_template_partner'] = array(
        '#name' => 'block_image',
        '#type' => 'managed_file',
        '#title' => t('Forge Partner Contract'),
        '#description' => t('Select a PDF template for the Forge Partner Contract. Only pdf allowed.'),
        '#default_value' => variable_get('forge_web_wizard_template_partner_fid', ''),
        '#upload_location' => 'public://forge_web_wizard_templates/',
        '#upload_validators' => array(
          'file_validate_extensions' => array('pdf'),
        ),
      );
      
      // File selection form element
      $form['forge_web_wizard_template_cra'] = array(
        '#name' => 'block_image',
        '#type' => 'managed_file',
        '#title' => t('Computing capasity Contract (CRA)'),
        '#description' => t('Select a PDF template for the Computing capasity Contract. Only pdf allowed.'),
        '#default_value' => variable_get('forge_web_wizard_template_cra_fid', ''),
        '#upload_location' => 'public://forge_web_wizard_templates/',
        '#upload_validators' => array(
          'file_validate_extensions' => array('pdf'),
        ),
      ); 
        // File selection form element
      $form['forge_web_wizard_template_tc'] = array(
        '#name' => 'block_image',
        '#type' => 'managed_file',
        '#title' => t('Terms and Conditions'),
        '#description' => t('Select a PDF template for Terms and Conditions. Only pdf allowed.'),
        '#default_value' => variable_get('forge_web_wizard_template_tc_fid', ''),
        '#upload_location' => 'public://forge_web_wizard_templates/',
        '#upload_validators' => array(
          'file_validate_extensions' => array('pdf'),
        ),
      );
    break;
  }
  return $form;
}

/**
* Implements hook_block_save().
*/
function forge_web_wizard_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'forge_web_wizard_templates' :
      // Saving the WYSIWYG text
      variable_set('forge_web_wizard_template_text_body', $edit['forge_web_wizard_template_text_body']['value']);

      // Saving the file, setting it to a permanent state, setting a FID variable
      $file_sda = file_load($edit['forge_web_wizard_template_sda']);
      $file_sda->status = FILE_STATUS_PERMANENT;
      file_save($file_sda);
      $block = block_load('forge_web_wizard', $delta);
      file_usage_add($file_sda, 'forge_web_wizard', 'block', $block->bid);
      variable_set('forge_web_wizard_template_sda_fid', $file_sda->fid);
      // Saving the file, setting it to a permanent state, setting a FID variable
      $file_partner = file_load($edit['forge_web_wizard_template_partner']);
      $file_partner->status = FILE_STATUS_PERMANENT;
      file_save($file_partner);
      $block = block_load('forge_web_wizard', $delta);
      file_usage_add($file_partner, 'forge_web_wizard', 'block', $block->bid);
      variable_set('forge_web_wizard_template_partner_fid', $file_partner->fid);
      
      // Saving the file, setting it to a permanent state, setting a FID variable
      $file_cra = file_load($edit['forge_web_wizard_template_cra']);
      $file_cra->status = FILE_STATUS_PERMANENT;
      file_save($file_cra);
      $block = block_load('forge_web_wizard', $delta);
      file_usage_add($file_cra, 'forge_web_wizard', 'block', $block->bid);
      variable_set('forge_web_wizard_template_cra_fid', $file_cra->fid);
      
      // Saving the file, setting it to a permanent state, setting a FID variable
      $file_tc = file_load($edit['forge_web_wizard_template_tc']);
      $file_tc->status = FILE_STATUS_PERMANENT;
      file_save($file_tc);
      $block = block_load('forge_web_wizard', $delta);
      file_usage_add($file_cra, 'forge_web_wizard', 'block', $block->bid);
      variable_set('forge_web_wizard_template_tc_fid', $file_tc->fid);
    break;
  }
}

function forge_web_wizard_block_output() {
  global $language;

  $block = array();
  if(!$_GET['role']) {
    return;
  }
  $role = $_GET['role'];
  
  if($role == 'SDA') {
    // Capture the image file path and form into HTML with attributes
    $file_sda = file_load(variable_get('forge_web_wizard_template_sda_fid', ''));
    $file_sda_url = file_create_url($file_sda->uri);
    $files = l('Service Developer Contract', $file_sda_url).'<br/>';
  }
  
  if(strstr($role, 'partner')) {
    $file_partner = file_load(variable_get('forge_web_wizard_template_partner_fid', ''));
    $file_partner_url = file_create_url($file_partner->uri);
    $files .= l('Forge Partner Contract', $file_partner_url).'<br/>';
  }
  
  if($role == 'partner_fsl_fpa_cra') {
    $file_cra = file_load(variable_get('forge_web_wizard_template_cra_fid', ''));
    $file_cra_url = file_create_url($file_cra->uri);
    $files .= l('Partner addendum for computing capacity Contract', $file_cra_url).'<br/>';
  }
  
  $file_tc = file_load(variable_get('forge_web_wizard_template_tc_fid', ''));
  $file_tc_url = file_create_url($file_tc->uri);
  $files .= l('Forge servicelab Terms and conditions', $file_tc_url).'<br/>';
  
  $attr = array(
    'attributes' => array(
      'class' => array('button')
    ), 
    'query' => array(
      'role' => $_GET['role']
    ) 
  );

  // The contact form has a Finnish version
  ($language->language == 'fi') ? ($contact_page = 'ota-yhteytta') : ($contact_page = 'contact-us');

/* Go to the Contact us page in the current language.
  For the moment it's the basic contact form only, no selected role is used to pre-fill it.
  @see: template.php: forgeweb_preprocess_node(&$vars); */

  //$continue_link = '<p>'.l(t('Fill in the ...'), 'wizard/registration', $attr).'</p>';
  $continue_link = '<p>'.l(t('Contact us'), $contact_page, array('attributes' => array('class' => 'button'))).'</p>';

  // Capture WYSIWYG text from the variable
  $text = '<p>'.variable_get('forge_web_wizard_template_text_body', '').'</p>'.$files.$continue_link;

  // Block output in HTML with div wrapper
  $block = array(
    'template_links' => array(
      '#prefix' => '
      ',
      '#type' => 'markup',
      '#markup' => $text,
    )
  );

  return $block;
}
 
/**
* Implements hook_token_info().
*/
function forge_web_wizard_token_info() {
  $info['tokens']['current-user']['fillpdf_link'] = array(
    'name' => t('Fillpdf link'),
    'description' => t('Returns the fillpdf link.'),
  );
  return $info;
}

/**
* Implements hook_tokens().
*/
function forge_web_wizard_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $user;
  $replacements = array();
  
  if ($type == 'current-user') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'fillpdf_link':
          /*
           * Set contract(s) link(s) to email to replaced [fillpdf_link] token
           * User specific data is saved in session
           */
          if(!empty($_SESSION['forge_web_wizard_sda_contract_'.$user->uid])) {
            $sda_user_data = $_SESSION['forge_web_wizard_sda_contract_'.$user->uid];
            $sda_pdf_id = variable_get('forge_web_wizard_sda_pdf_id', '');
          }
          if(!empty($_SESSION['forge_web_wizard_partner_contract_'.$user->uid])) {
            $partner_user_data = $_SESSION['forge_web_wizard_partner_contract_'.$user->uid];
            $partner_pdf_id = variable_get('forge_web_wizard_partner_pdf_id', '');
          }
          if(!empty($_SESSION['forge_web_wizard_cra_contract_'.$user->uid])) {
            $cra_user_data = $_SESSION['forge_web_wizard_cra_contract_'.$user->uid];
            $cra_pdf_id = variable_get('forge_web_wizard_cra_pdf_id', '');
          }
          $url = '';
          $prefix = '';
          $fid = '';
          $webform_nid = '';
          $webform_sid = '';
          if(!empty($partner_pdf_id)) {
            $fid = $partner_pdf_id;
            $webform_nid = $partner_user_data['nid'];
            $webform_sid = $partner_user_data['sid'];
          }
          if(!empty($sda_pdf_id)) {
            $fid = $sda_pdf_id;
            $webform_nid = $sda_user_data['nid'];
            $webform_sid = $sda_user_data['sid'];
          }
          if(!empty($fid)) {
            $url = _forge_web_wizard_fillpdf_pdf_link($fid, NULL, array(array('nid'=> $webform_nid, 'sid'=> $webform_sid)), $sample = FALSE);
          }
          if(!empty($cra_pdf_id)) {
            if(!empty($url)) {
              $prefix = '<br/>';
            }
            $fid = $cra_pdf_id;
            $webform_nid = $cra_user_data['nid'];
            $webform_sid = $cra_user_data['sid'];
            $url .= $prefix._forge_web_wizard_fillpdf_pdf_link($fid, NULL, array(array('nid'=> $webform_nid, 'sid'=> $webform_sid)), $sample = FALSE);
          }
          
          $replacements[$original] = $url;
          break;
      }
     }
  }
  return $replacements;
}

/**
 * 
 * Implements hook_form_alter 
 */
function forge_web_wizard_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if(strstr($form_id, 'webform_client_form')) {
    drupal_add_js(drupal_get_path('module', 'forge_web_wizard').'/forge_web_wizard.js');
    /*
     * make maxlenght module working with webform components
     */
    if(module_exists(maxlength)) {
      $max_length = 240;
      $field1 = 'partner_offering_description';
      $form['submitted'][$field1]['#pre_render'] = array('maxlength_pre_render');
      $form['submitted'][$field1]['#maxlength'] = $max_length;
      $form['submitted'][$field1]['#maxlength_js'] = TRUE;
      $field2 = 'desc_of_developer_service_concise_description_of_the_service_developed';
      $form['submitted']['description_of_developed_service'][$field2]['#pre_render'] = array('maxlength_pre_render');
      $form['submitted']['description_of_developed_service'][$field2]['#maxlength'] = $max_length;
      $form['submitted']['description_of_developed_service'][$field2]['#maxlength_js'] = TRUE;
    }
    
    /*
    * Replace [path]xx/xxx[/path] in webform markup components
    */
    foreach ($form['submitted'] as $key => $compo) {
      if (!empty($compo['#type']) && $compo['#type'] == 'fieldset') {
        // if component type is a fieldset lets loop again. 
        // TODO: maybe we need recursive function for this if there is fieldsets inside fieldsets
        // ATM there is only one fieldset
        if(is_array($compo)) {
          foreach ($compo as $sub_key => $sub_compo) {
            if(is_array($sub_compo)) {
              if (!empty($sub_compo['#type']) && $sub_compo['#type'] === 'markup' && strstr($sub_compo['#webform_component']['value'],'[path]')) {
                $pattern = '#\[path]((?:[^[]|\[(?!/?path])|(?R))+)\[/path]#';
                $callback = '_forge_web_wizard_embed_filter_replace';
                $replacement = preg_replace_callback($pattern, $callback, $sub_compo['#webform_component']['value']);
                if ($replacement) {
                  $form['submitted'][$key][$sub_key]['#markup'] = $replacement;
                }
              }
            }
          }
        }
      }
      // if component typeis markup and if there is [path] lets replace it
      elseif (!empty($compo['#type']) && $compo['#type'] == 'markup' && strstr($compo['#webform_component']['value'],'[path]')) {
        $pattern = '#\[path]((?:[^[]|\[(?!/?path])|(?R))+)\[/path]#';
        $callback = '_forge_web_wizard_embed_filter_replace';
        $replacement = preg_replace_callback($pattern, $callback, $compo['#webform_component']['value']);
        if($replacement) {
          $form['submitted'][$key]['#markup'] = $replacement;
        }
      }
    }
    if(!empty($form['actions']['submit']['#value']) && !empty($form['submitted']['step_1'])) {
      if(!user_is_anonymous()) {
        $form['actions']['submit']['#value'] = t('Fill in the application');
      }
    }
  }
  // alter registration form
  // add additional submit and fields from wizard first step
  elseif ($form_id == 'user_register_form') {
    $submission = array();
    $form['#submit'][] = 'forge_web_wizard_user_registration_submit';
    
    if(!empty($_SESSION['forge_web_wizard_role'])) {
      $role = $_SESSION['forge_web_wizard_role'];
      
      $form['forge_web_role'] = array(
        '#type' => 'value', 
        '#value' => $role
      );
      $need_computing_capasity = FALSE;
      if($role == 'partner_fsl_fpa_cra') {
        $need_computing_capasity = 'cra';
      }
      $form['forge_web_need_cloud_computing_capasity'] = array(
        '#type' => 'value', 
        '#value' => $need_computing_capasity
      );
    }
  }
  // alter user profile form because we need redirect user to wizard next step if user is on the wizard flow
  elseif($form_id == 'user_profile_form') {
    // get wizard role selection from cache
    $forge_web_user_data = _forge_web_wizard_get_cached_user_data($user);
    if(!empty($forge_web_user_data->data)) {
      $form['#submit'][] = 'forge_web_wizard_user_profile_submit';
    }
    $form['picture']['#access'] = FALSE;
  }
}

/**
 * 
 * Implements hook_menu 
 */
function forge_web_wizard_menu() {
  $items['admin/config/media/forge-web-wizard'] = array(
    'title' => 'Forge web wizard settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forge_web_wizard_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of Forge web wizard functionality.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['wizard/confirmation/%/%'] = array(
    'page callback' => 'forge_web_wizard_confirmation',
    'page arguments' => array(2, 3),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
    'title' => 'Confirmation',
  );
  $items['wizard/partner-contract-submit/%/%'] = array(
    'page callback' => 'forge_web_wizard_partner_contract_submit',
    'page arguments' => array(2,3),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
    'title' => 'Registration',
  );
  $items['wizard/sda-contract-submit/%/%'] = array(
    'page callback' => 'forge_web_wizard_sda_contract_submit',
    'page arguments' => array(2,3),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
    'title' => 'Registration',
  );
  $items['wizard/cra-contract-submit/%/%'] = array(
    'page callback' => 'forge_web_wizard_cra_contract_submit',
    'page arguments' => array(2,3),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
    'title' => 'Registration',
  );
  $items['wizard/registration'] = array(
    'page callback' => 'forge_web_wizard_registration',
    //'page arguments' => array(2,3),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
    'title' => 'Registration',
  );
  return $items;
}

function forge_web_wizard_admin_settings() {
  $form['forge_web_wizard_sda_pdf_id']  = array(
    '#type' => 'textfield',
    '#title' => t('SDA contract PDF file ID'),
    '#default_value' => variable_get('forge_web_wizard_sda_pdf_id'),
    '#description' => t(''),
  );
  $form['forge_web_wizard_partner_pdf_id']  = array(
    '#type' => 'textfield',
    '#title' => t('Partner contract PDF file ID'),
    '#default_value' => variable_get('forge_web_wizard_partner_pdf_id'),
    '#description' => t(''),
  );
  $form['forge_web_wizard_cra_pdf_id']  = array(
    '#type' => 'textfield',
    '#title' => t('CRA PDF file ID'),
    '#default_value' => variable_get('forge_web_wizard_cra_pdf_id'),
    '#description' => t(''),
  );
  $form['email_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Confirmation e-mail settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Settings for confirmation e-mail after user has submitted contract form. All fields have token support.'),
  );
  $form['email_settings']['forge_web_wizard_email_to']  = array(
    '#type' => 'textfield',
    '#title' => t('Email to'),
    '#default_value' => variable_get('forge_web_wizard_email_to'),
    '#description' => t('E-mail address where to send confirmation e-mail. Comma separated list if there is more than one e-mail address.'),
  );
  $form['email_settings']['forge_web_wizard_email_subject']  = array(
    '#type' => 'textfield',
    '#title' => t('Email subject'),
    '#default_value' => variable_get('forge_web_wizard_email_subject'),
    '#description' => t(''),
  );
  $form['email_settings']['forge_web_wizard_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email body'),
    '#default_value' => variable_get('forge_web_wizard_email_body'),
    '#rows' => 30,
    '#description' => t('Confirmatiion email body.'),
  );
  $form['email_settings']['token_help'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('node', 'comment', 'term', 'vocabulary', 'user'),
  );
  return system_settings_form($form);
}

/*
 * submit for user profile when user is middle of wizard
 */
function forge_web_wizard_user_profile_submit($form, &$form_state) {
  global $user;

  // get wizard role selection from cache
  $role = _forge_web_wizard_get_cached_user_data($user);
  $redir = _forge_web_wizard_set_redirect_for_role_selection($role->data);
  
  drupal_goto($redir);
  
}

/*
 * menu callback for Partner contract submit to save session data
 * and redirect user to the right place
 * 
 * callback is set in webform node settings
 */
function forge_web_wizard_partner_contract_submit($nid, $sid) {
  global $user;
  // save temporary user data to session
  $_SESSION['forge_web_wizard_partner_contract_'.$user->uid] = array('nid' => $nid, 'sid' => $sid);
  // "I need cloud computing capasity" if user has selected it
  $need_cloud_computing_capasity = cache_get('forge_web_wizard_user_data_'.$user->uid.':need_cloud_computing_capasity');
  if($need_cloud_computing_capasity->data == 'cra') {
    drupal_goto('wizard/partner-addendum-computing-capacity-contract');
  }
  else {
    drupal_goto('wizard/confirmation/'.$nid.'/'.$sid);
  }
}

/*
 * Manu callback for sda contract submit to save session data
 * and redirect user ro right place
 * 
 * callback is set in webform node settings
 */
function forge_web_wizard_sda_contract_submit($nid, $sid) {
  global $user;
  // save temporary user data to session
  $_SESSION['forge_web_wizard_sda_contract_'.$user->uid] = array('nid' => $nid, 'sid' => $sid);
  drupal_goto('wizard/confirmation/'.$nid.'/'.$sid);
}

/*
 * Menu callback for cra contract submit to save session data
 * and redirect user ro right place
 * 
 * callback is set in webform node settings
 */
function forge_web_wizard_cra_contract_submit($nid, $sid) {
  global $user;
  // save temporary user data to session
  $_SESSION['forge_web_wizard_cra_contract_'.$user->uid] = array('nid' => $nid, 'sid' => $sid);
  drupal_goto('wizard/confirmation/'.$nid.'/'.$sid);
}

/*
 * menu callback
 * print only registaration form
 */
function forge_web_wizard_registration() {
  
  global $user;
  if(!user_is_anonymous()) {
    //module_load_include('inc', 'webform', 'includes/webform.submissions');
    //$submission = webform_get_submission($nid, $sid);
    
    if(!empty($_GET['role'])) {
      $role = $_GET['role'];
      if($role == 'partner_fsl_fpa_cra') {
        $need_cloud_computing_capasity = 'cra';
        cache_set('forge_web_wizard_user_data_'.$user->uid.':need_cloud_computing_capasity', $need_cloud_computing_capasity);
      }
      cache_set('forge_web_wizard_user_data_'.$user->uid.':role', $role);
      $redir = _forge_web_wizard_set_redirect_for_role_selection($role);
    }
    drupal_goto($redir);
  }
  $form = drupal_get_form('user_register_form');
  $form['wizard_markup'] = array(
    '#markup' => t('<p>You need to register before to fill in application.</p>'),
    '#weight' => -100,
  );
  return drupal_render($form);
}

/*
 * wizard registration submit
 * handle wizard first step user data saving
 */
function forge_web_wizard_user_registration_submit($form, &$form_state) {
  if(!empty($form_state['values']['uid'])) {
    $uid = $form_state['values']['uid'];
    $user = user_load($uid);
    
    $role = $form_state['values']['forge_web_role'];
    $need_cloud_computing_capasity = $form_state['values']['forge_web_need_cloud_computing_capasity'];
    // set role selection to cache because we need that data after user has clicked link in e-mail
    cache_set('forge_web_wizard_user_data_'.$user->uid.':role', $role);
    cache_set('forge_web_wizard_user_data_'.$user->uid.':need_cloud_computing_capasity', $need_cloud_computing_capasity);
  }
}

/*
 * wizard confirmation menu callback
 */
function forge_web_wizard_confirmation($nid, $sid) {
  $output = '';
  $pdf_id = '';
  global $user;
  
  if(is_numeric($nid)) {
    $node = node_load($nid);
  }
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submission = webform_get_submission($nid, $sid);
  
  if(!webform_submission_access($node, $submission)) {
    return drupal_access_denied();
  }
  if(!empty($_SESSION['forge_web_wizard_sda_contract_'.$user->uid])) {
    $sda_user_data = $_SESSION['forge_web_wizard_sda_contract_'.$user->uid];
    $sda_pdf_id = variable_get('forge_web_wizard_sda_pdf_id', '');
  }
  if(!empty($_SESSION['forge_web_wizard_partner_contract_'.$user->uid])) {
    $partner_user_data = $_SESSION['forge_web_wizard_partner_contract_'.$user->uid];
    $partner_pdf_id = variable_get('forge_web_wizard_partner_pdf_id', '');
  }
  if(!empty($_SESSION['forge_web_wizard_cra_contract_'.$user->uid])) {
    $cra_user_data = $_SESSION['forge_web_wizard_cra_contract_'.$user->uid];
    $cra_pdf_id = variable_get('forge_web_wizard_cra_pdf_id', '');
  }
  
  // clear temporary cache data also which were used in wizard only
  cache_clear_all('forge_web_wizard_user_data_'.$user->uid.':role', 'cache');
  cache_clear_all('forge_web_wizard_user_data_'.$user->uid.':need_cloud_computing_capasity', 'cache');
  
  if(!empty($partner_pdf_id)) {
    $partner_link = l(t('Download Forge Partner contract'),  'fillpdf', array('query' => array('fid' => $partner_pdf_id, 'webform[nid]' => $partner_user_data['nid'], 'webform[sid]' => $partner_user_data['sid'])));
    $output = $partner_link.'<br/>';
  }
  if(!empty($cra_pdf_id)) {
    $cloud_computing_link = l(t('Download Cloud Computing contract'),  'fillpdf', array('query' => array('fid' => $cra_pdf_id, 'webform[nid]' => $cra_user_data['nid'], 'webform[sid]' => $cra_user_data['sid'])));
    $output .= $cloud_computing_link.'<br/>';
  }
  if(!empty($sda_pdf_id)) {
    $sda_link = l(t('Download Service Developer Contract'), 'fillpdf', array('query' => array('fid' => $sda_pdf_id, 'webform[nid]' => $sda_user_data['nid'], 'webform[sid]' => $sda_user_data['sid']))); 
    $output .= $sda_link.'<br/>';
  }
  if(module_exists('onnistuufi')) {
    global $base_url;
    $doc_url = url($base_url.'/fillpdf', array('query' => array('fid' => $sda_pdf_id, 'webform[nid]' => $sda_user_data['nid'], 'webform[sid]' => $sda_user_data['sid'])));
    $output .= l(t('Sign document'), 'onnistuufi/sign', array('query' => array('document' => $doc_url)));
  }
  $token_data['user'] = $user;
  $token_data['current-user'] = $user;
  $to = token_replace(variable_get('forge_web_wizard_email_to', ''), $token_data, array('clear' => true)) ;
  $body = variable_get('forge_web_wizard_email_body', '');
  $subject = variable_get('forge_web_wizard_email_subject', '');
  $attachment = '';
  $from = '';
  
  drupal_mail('forge_web_wizard', 'key', $to, $user->language, array('body' => $body, 'subject' => $subject, 'attachment' => $attachment), $from, TRUE);
  
  // Create project node from submitted data
  _forge_web_wizard_create_node($submission);
  
  unset($_SESSION['forge_web_wizard_sda_contract_'.$user->id]);
  unset($_SESSION['forge_web_wizard_partner_contract_'.$user->id]);
  unset($_SESSION['forge_web_wizard_cra_contract_'.$user->id]);
  
  return $output;
}

function forge_web_wizard_mail($key, &$message, $params) {
  global $user;
  
  $token_data['user'] = $user;
  $token_data['current-user'] = $user;
  if (isset($params['subject'])) {
    $message['subject'] = token_replace($params['subject'], $token_data, array('clear' => true));
  }
  if (isset($params['body'])) {
    $message['body'][] = token_replace($params['body'], $token_data, array('clear' => true));
  }
  if (isset($params['attachment'])) {
    $message['params']['attachments'][] = $params['attachment'];
  }
}

/**
 * Implements hook_fillpdf_merge_fields_alter_alter().
 * alter is twice because fillpdf has drupal_alter('fillpdf_merge_fields_alter') so we need two alters :)
 */
function forge_web_wizard_fillpdf_merge_fields_alter_alter(&$fields, $context) {
  /*
   * We need to map multiple fields here because there is no token support yet
   * in wfm module.
   * 
   * Mapped array:
   * array(
   *  'FIELD_KEY_FROM_WEBFORM_COMPONENT' => 'FIELD NAME TO MAP IN PDF'
   *  // if you need to map one webform field to many pdf fields use:
   *  'FIELD_KEY_FROM_WEBFORM_COMPONENT' => array(
   *    'FIELD NAME TO MAP IN PDF 1'
   *    'FIELD NAME TO MAP IN PDF 2'
   *    ......
   * )
   */
  $mapped_fields = array(
    'parties_involved_business_id' => 'Business ID',
    'parties_involved_company_name' => array(
      'Developer name',
      'Signature name',
    ),
    'subcontractor_organization_name' => 'Organization name',
    'subcontractor_business_id' => 'Consultant business ID'
  );
  foreach($fields as $key => $field) {
    $fields[$key] = strip_tags(htmlspecialchars_decode($field));
  }
  foreach($mapped_fields as $field_key => $field_value) {
    $component_key = _forge_web_wizard_search_for_key($field_key, $context['webforms'][0]['webform']->webform['components']); 
    $multiple_fields = _forge_web_wizard_recursive_array_search($component_key, $context['webforms'][0]['submission']->wfm_data[$component_key]);
    $i = 1;
    foreach ($multiple_fields as $key => $value) {
      if(is_array($field_value)) {
        foreach ($field_value as $sub_key => $sub_value) {
          $fields[$sub_value.' '.$i] = $value;
        }
      }
      else {
        $fields[$field_value.' '.$i] = $value;
      }
      $i++;
    }
  }
  
}

/**
* Implementation of hook_menu_local_tasks_alter()
 * we want to hide normal registration form
*/
function forge_web_wizard_menu_local_tasks_alter(&$data, $router_item, $root_path){
  if(($router_item['path'] == 'user' || $router_item['path'] == 'user/password') && ($root_path == 'user' || $root_path == 'user/password')) {
    unset($data['tabs'][0]['output'][0]);
  }
}

/*
 * Implementation of hook_menu_alter()
 * do not allow permssion on user/register url
 */
function forge_web_wizard_menu_alter(&$items) {
  $items['user/register']['access callback'] = FALSE;
}

/**
 * function converts [path]xxx/xxx[/path] with node summary and link to node
 * @param $match
 *   $match[1] contains the nid
 * @return
 *   String
 */
function _forge_web_wizard_embed_filter_replace($match) {
  if (!empty($match[1])) {
    $path = $match[1];
    $normal_path = drupal_get_normal_path($path);
    if(!empty($normal_path)) {
      $node_path_arr = explode('/', $normal_path);
      $nid = $node_path_arr[1];
      if(is_numeric($nid)) {
        $node = node_load($nid);
      }
    }
    if(is_object($node)) {
      $body = field_get_items('node', $node, 'body');
    }
    $summary = $body[0]['summary'];
    $summary .= '<p>'.l(t('Continue >'), 'node/'.$node->nid, array('query' => array('fw' => '1'), 'attributes' => array('class' => 'learn-more-link button'))).'</p>';
    return $summary;
  }
  else {
    return t('Content not found. (PATH:'.$match[1].')');
  }
}

/*
 * helper for hook_fillpdf_merge_fields_alter_alter()
 * Search key from given array
 */
function _forge_web_wizard_search_for_key($value, $array) {
  foreach ($array as $key => $val) {
    if ($val['form_key'] === $value) {
      return $key;
    }
  }
  return null;
}

/*
 * recursive helper
 * recursive walk throught array
 */
function _forge_web_wizard_recursive_array_search($needle, $haystack, $return_arr = array()) { 
  foreach($haystack as $key => $value) {
    if($needle === $key) {
      $return_arr[] = $haystack[$key][0];
    }
    if(is_array($value)){
      $return_arr = _forge_web_wizard_recursive_array_search($needle, $value, $return_arr);
    }
  }
  return $return_arr;
}

function _forge_web_wizard_set_redirect_for_role_selection($role) {
  $redir = '';
  if($role == 'SDA') {
   $redir = 'wizard/service-development-contract';
  }
  elseif(strstr($role, 'partner')) {
   $redir = 'wizard/forge-service-lab-partner-contract';
  }
  return $redir;
}

function _forge_web_wizard_get_cached_user_data($user) {
  return cache_get('forge_web_wizard_user_data_'.$user->uid.':role');
}

/**
 * copy from fillpdf and changes return value (added trailing /)
 * see fillpdf_pdf_link function and
 * https://drupal.org/node/2233075
 */
function _forge_web_wizard_fillpdf_pdf_link($fid, $nids = NULL, $webform_arr = NULL, $sample = FALSE) {
  $nids_uri = $webforms_uri = "";

  if (is_array($nids)) {
    $nids_uri = '&nids[]=' . implode('&nids[]=', $nids);
  }
  elseif (isset($nids)) {
    $nids_uri = "&nids[]={$nids}";
  }

  if (is_array($webform_arr)) {
    if (!empty($webform_arr['nid'])) {
      $webform_arr = array($webform_arr);
    }
    foreach ($webform_arr as $key => $webform) {
      $webforms_uri .= "&webforms[{$key}][nid]={$webform['nid']}";
    }
    $webforms_uri .= $webform['sid'] ? "&webforms[{$key}][sid]={$webform['sid']}" : "";
  }
  $sample = $sample ? '&sample=true' : '';
  
  return url('', array('absolute' => TRUE)) . "/fillpdf?fid={$fid}{$nids_uri}{$webforms_uri}{$sample}";
}

function _forge_web_wizard_create_node($submission) {
  global $user;
  
  $node = new stdClass();
  // Name of the project -> node title
  $node->title = $submission->data[25][0];
  $node->type = 'project';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1; //(1 or 0): published or not
  $node->promote = 0; //(1 or 0): promoted to front page
  $node->comment = 0;
  
  // Name of the project -> page title
  $node->field_page_title[$node->language][]['value'] = $submission->data[25][0];
  // Concise description of the project -> Short project description
  $node->field_short_project_desc[$node->language][]['value'] = $submission->data[26][0];
  // Concise description of the project -> node body
  $node->body[$node->language][]['value'] = $submission->data[26][0];
  
  // Company name -> Responsible organization
  if(is_array($submission->wfm_data[21])) {
    foreach($submission->wfm_data[21] as $company_array) {
      if(is_array($company_array)) {
        foreach($company_array as $companies) {
          if(is_array($companies)) {
            foreach($companies as $company) {
              $responsible_organizations[] = $company[21][0];
            }
          }
        }
      }
    }
  }
  $node->field_responsible_organization[$node->language][]['value'] = implode(', ', $responsible_organizations);
  
  $node = node_submit($node); // Prepare node for saving
  node_save($node);
}  

<?php
/**
 * @file
 * Code for the FORGE WEB wizard feature.
 */

include_once 'forge_web_wizard.features.inc';

/**
 * 
 * Implements hook_form_alter 
 */
function forge_web_wizard_form_alter(&$form, &$form_state, $form_id) {
  /*
   * Replace [nid:xx] in webform markup type components
   */
  if($form_id === 'webform_client_form_4') {
    foreach ($form['submitted'] as $key => $compo) {
      if ($compo['#type'] == 'fieldset') {
        // if component type is a fieldset lets loop again. 
        // TODO: maybe we need recursive function for this if there is fieldsets inside fieldsets
        if(is_array($compo)) {
          foreach ($compo as $sub_key => $sub_compo) {
            if(is_array($sub_compo)) {
              if (!empty($sub_compo['#type']) && $sub_compo['#type'] === 'markup' && strstr($sub_compo['#markup'],'[nid:')) {
                $pattern = '/\[nid:([0-9][^|]*?)?\]/im';
                $callback = '_forge_web_wizard_embed_filter_replace';
                $replacement = preg_replace_callback($pattern, $callback, $sub_compo['#value']);
                if ($replacement) {
                  $form['submitted'][$key][$sub_key]['#markup'] = $replacement;
                }
              }
            }
          }
        }
      }
      // if component typeis markup and if there is [nid:xx] lets replace it
      elseif ($compo['#type'] == 'markup' && strstr($compo['#markup'],'[nid:')) {
        $pattern = '/\[nid:([0-9][^|]*?)?\]/im';
        $callback = '_forge_web_wizard_embed_filter_replace';
        $replacement = preg_replace_callback($pattern, $callback, $compo['#value']);
        if($replacement) {
          $form['submitted'][$key]['#markup'] = $replacement;
        }
      }
    }
  }
}

/**
 * function converts [nid:xxx] with node summary and link to node
 * @param $match
 *   $match[1] contains the nid
 * @return
 *   String
 */
function _forge_web_wizard_embed_filter_replace($match) {
  if (is_numeric($match[1]) && $node = node_load($match[1])) {
    $body = field_get_items('node', $node, 'body');
    $summary = $body[0]['summary'];
    $summary .= '<p>'.l(t('Learn more'), 'node/'.$node->nid).'</p>';
    return $summary;
  }
  else {
    return '';
  }
}

/**
 * 
 * Implements hook_menu 
 */
function forge_web_wizard_menu() {
  $items['become-a-partner/confirmation/%/%'] = array(
    'page callback' => 'forge_web_wizard_confirmation',
    'page arguments' => array(2, 3),
    'access arguments' => array("access content"),
    'type' => MENU_CALLBACK,
    'title' => 'Confirmation',
  );
  
  return $items;
}

function forge_web_wizard_confirmation($nid, $sid) {
  // Get the submission array
  $submission = webform_menu_submission_load($sid, $nid);
  //dsm($submission);
  
  // 'role selection' is key 1
  if(!empty($submission->data[1]['value'][0])) {
    $value = $submission->data[1]['value'][0];
    $field_name = 'field_'.strtolower($value);
  }
  
  // 'I need cloud computing...' is key 11
  if(!empty($submission->data[11]['value'][0])) {
    $value = $submission->data[11]['value'][0];
    $cloud_computing_field_name = 'field_'.strtolower($value);
  }
  
  if(is_numeric($nid)) {
    $node = node_load($nid);
    //dsm($node);
    $field_values = field_get_items('node', $node, $field_name);
    $pdf_id = $field_values[0]['value'];
    if(!empty($cloud_computing_field_name)) {
      $cloud_computing_values = field_get_items('node', $node, $cloud_computing_field_name);
      $cloud_computing_pdf_id = $cloud_computing_values[0]['value'];
    }
  }
  
  if(!empty($cloud_computing_field_name)) {
    $cloud_computing_link = l(t('Download Cloud Computing contract'), 'fillpdf&fid='.$cloud_computing_pdf_id.'&webform[nid]='.$nid.'&webform[sid]='.$sid);
    $output = $cloud_computing_link.'<br/>';
  }
  
  $output .= l(t('Download Contract'), 'fillpdf&fid='.$pdf_id.'&webform[nid]='.$nid.'&webform[sid]='.$sid); 
  return $output;
}